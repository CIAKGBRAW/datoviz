#version 450

#define WORKGROUP_SIZE 16
#define IMAGE_SIZE 512
#define F (100.0 / IMAGE_SIZE)

layout (
    local_size_x = WORKGROUP_SIZE,
    local_size_y = WORKGROUP_SIZE,
    local_size_z = 1
) in;

layout (binding = 0, rgba8) uniform image2D image;


vec4 fetch_image(ivec2 shift) {
    return imageLoad(image, ivec2(gl_GlobalInvocationID.x + shift.x, gl_GlobalInvocationID.y + shift.y));
}


void store_image(ivec2 shift) {
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), fetch_image(shift));
}


void main() {
  if(gl_GlobalInvocationID.x >= IMAGE_SIZE || gl_GlobalInvocationID.y >= IMAGE_SIZE)
    return;

    float x = float(gl_GlobalInvocationID.x) / IMAGE_SIZE;
    float y = float(gl_GlobalInvocationID.y) / IMAGE_SIZE;

    vec4 center    = fetch_image(ivec2(+0, +0));
    vec4 left      = fetch_image(ivec2(-1, +0));
    vec4 right     = fetch_image(ivec2(+1, +0));
    vec4 top       = fetch_image(ivec2(+0, +1));
    vec4 bottom    = fetch_image(ivec2(+0, -1));

    vec4 vnew = center + F * (left + right + top + bottom - 4 * center);
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), vnew);

    // Boundary conditions.
    if (gl_GlobalInvocationID.x == 0)
        store_image(ivec2(+1, +0));
    else if (gl_GlobalInvocationID.x == IMAGE_SIZE - 1)
        store_image(ivec2(-1, +0));
    else if (gl_GlobalInvocationID.y == 0)
        store_image(ivec2(+0, +1));
    else if (gl_GlobalInvocationID.y == IMAGE_SIZE - 1)
        store_image(ivec2(+0, -1));
}

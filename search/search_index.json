{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Visky documentation \u00b6 Visky is an interactive scientific data visualization library leveraging the graphics processing unit ( GPU ) for high performance and scalability. It targets 3D rendering as well as high-quality antialiased 2D graphics . Written mainly in C, it is currently based on the Vulkan graphics API created by the Khronos consortium, successor of OpenGL. Visky provides basic bindings in Python and could support other languages in the future (Julia, R, MATLAB, Rust, Java...). Warning At this time, Visky is at an early stage of development. It is quite usable but the API is expected to break regularly. The documentation is still being written. The documentation is divided in: Quick start : start here User manual : for regular users who are mainly interested in scientific 2D/3D plotting Expert manual : for advanced users who need to create their own visuals by writing shaders in GLSL Developer manual : for advanced users who want to contribute back to Visky API reference See also the gallery .","title":"Home"},{"location":"#visky-documentation","text":"Visky is an interactive scientific data visualization library leveraging the graphics processing unit ( GPU ) for high performance and scalability. It targets 3D rendering as well as high-quality antialiased 2D graphics . Written mainly in C, it is currently based on the Vulkan graphics API created by the Khronos consortium, successor of OpenGL. Visky provides basic bindings in Python and could support other languages in the future (Julia, R, MATLAB, Rust, Java...). Warning At this time, Visky is at an early stage of development. It is quite usable but the API is expected to break regularly. The documentation is still being written. The documentation is divided in: Quick start : start here User manual : for regular users who are mainly interested in scientific 2D/3D plotting Expert manual : for advanced users who need to create their own visuals by writing shaders in GLSL Developer manual : for advanced users who want to contribute back to Visky API reference See also the gallery .","title":"Visky documentation"},{"location":"api/","text":"","title":"API"},{"location":"gallery/","text":"Gallery \u00b6 Coming soon!","title":"Introduction"},{"location":"gallery/#gallery","text":"Coming soon!","title":"Gallery"},{"location":"developer/","text":"Developer manual \u00b6 This developer manual provides guidance to advanced users of Visky who wish to contribute back to the library. It provides details to set up a build environment, coding guidelines, and implementation details.","title":"Introduction"},{"location":"developer/#developer-manual","text":"This developer manual provides guidance to advanced users of Visky who wish to contribute back to the library. It provides details to set up a build environment, coding guidelines, and implementation details.","title":"Developer manual"},{"location":"developer/ci/","text":"Continuous integration \u00b6","title":"Continuous integration"},{"location":"developer/ci/#continuous-integration","text":"","title":"Continuous integration"},{"location":"developer/code/","text":"Code organization \u00b6","title":"Code organization"},{"location":"developer/code/#code-organization","text":"","title":"Code organization"},{"location":"developer/coding/","text":"Coding practices \u00b6","title":"Coding practices"},{"location":"developer/coding/#coding-practices","text":"","title":"Coding practices"},{"location":"developer/implementation/","text":"Implementation details \u00b6 Plot layout \u00b6 Visual data \u00b6 Axes 2D \u00b6","title":"Implementation details"},{"location":"developer/implementation/#implementation-details","text":"","title":"Implementation details"},{"location":"developer/implementation/#plot-layout","text":"","title":"Plot layout"},{"location":"developer/implementation/#visual-data","text":"","title":"Visual data"},{"location":"developer/implementation/#axes-2d","text":"","title":"Axes 2D"},{"location":"developer/test/","text":"Testing framework \u00b6","title":"Testing"},{"location":"developer/test/#testing-framework","text":"","title":"Testing framework"},{"location":"expert/","text":"Expert manual \u00b6 Coming soon!","title":"Introduction"},{"location":"expert/#expert-manual","text":"Coming soon!","title":"Expert manual"},{"location":"expert/custom1/","text":"Custom visuals: beginner level \u00b6 Visky provides a relatively rich set of visuals that can be used to make a large variety of scientific visualizations. However, more complex use-cases and applications for which performance and more fine-grained memory footprint are desirable, require the user to write custom visuals. Writing a custom visual is relatively complex. It typically requires writing custom shaders in GLSL, and following a set of rules implemented by Visky in order to make the visual compatible with the rest of the library. Writing a custom visual also requires understanding the basics of the GPU graphics pipeline and rudiments of Vulkan (via the vklite interface). This expert manual provides a comprehensive guide to writing custom visuals for users without prior knowledge and experience of GPU graphics. An example: the triangle visual \u00b6 Geometric primitives \u00b6 Vertices \u00b6 Indices \u00b6 Vertex shader \u00b6 Fragment shader \u00b6 Bindings and resources \u00b6 Uniform parameters \u00b6 Panel transformation matrices \u00b6 Visual props \u00b6 Checklist when writing a custom visual \u00b6 Start with the template file Determine the geometric primitive Determine the vertex attributes and their types Determine the uniform parameter structure and check alignment Determine the required resources Write the shaders in GLSL Put it all together Try the visual by setting directly the vertex attributes and, optionally, the indices Determine the visual props Make the visual data array structure Write the baking function (optional)","title":"Custom visuals: beginner"},{"location":"expert/custom1/#custom-visuals-beginner-level","text":"Visky provides a relatively rich set of visuals that can be used to make a large variety of scientific visualizations. However, more complex use-cases and applications for which performance and more fine-grained memory footprint are desirable, require the user to write custom visuals. Writing a custom visual is relatively complex. It typically requires writing custom shaders in GLSL, and following a set of rules implemented by Visky in order to make the visual compatible with the rest of the library. Writing a custom visual also requires understanding the basics of the GPU graphics pipeline and rudiments of Vulkan (via the vklite interface). This expert manual provides a comprehensive guide to writing custom visuals for users without prior knowledge and experience of GPU graphics.","title":"Custom visuals: beginner level"},{"location":"expert/custom1/#an-example-the-triangle-visual","text":"","title":"An example: the triangle visual"},{"location":"expert/custom1/#geometric-primitives","text":"","title":"Geometric primitives"},{"location":"expert/custom1/#vertices","text":"","title":"Vertices"},{"location":"expert/custom1/#indices","text":"","title":"Indices"},{"location":"expert/custom1/#vertex-shader","text":"","title":"Vertex shader"},{"location":"expert/custom1/#fragment-shader","text":"","title":"Fragment shader"},{"location":"expert/custom1/#bindings-and-resources","text":"","title":"Bindings and resources"},{"location":"expert/custom1/#uniform-parameters","text":"","title":"Uniform parameters"},{"location":"expert/custom1/#panel-transformation-matrices","text":"","title":"Panel transformation matrices"},{"location":"expert/custom1/#visual-props","text":"","title":"Visual props"},{"location":"expert/custom1/#checklist-when-writing-a-custom-visual","text":"Start with the template file Determine the geometric primitive Determine the vertex attributes and their types Determine the uniform parameter structure and check alignment Determine the required resources Write the shaders in GLSL Put it all together Try the visual by setting directly the vertex attributes and, optionally, the indices Determine the visual props Make the visual data array structure Write the baking function (optional)","title":"Checklist when writing a custom visual"},{"location":"expert/custom2/","text":"Custom visuals: intermediate level \u00b6 Note This page assumes the beginner level guide to custom visuals has been followed. Uniform buffers \u00b6 Textures \u00b6 Baking \u00b6 Position transformation \u00b6","title":"Custom visuals: intermediate"},{"location":"expert/custom2/#custom-visuals-intermediate-level","text":"Note This page assumes the beginner level guide to custom visuals has been followed.","title":"Custom visuals: intermediate level"},{"location":"expert/custom2/#uniform-buffers","text":"","title":"Uniform buffers"},{"location":"expert/custom2/#textures","text":"","title":"Textures"},{"location":"expert/custom2/#baking","text":"","title":"Baking"},{"location":"expert/custom2/#position-transformation","text":"","title":"Position transformation"},{"location":"expert/custom3/","text":"Custom visuals: advanced level \u00b6 Note This page assumes the intermediate level guide to custom visuals has been followed. Visual hierarchy \u00b6 Pre-baking \u00b6 Infinite rescaling \u00b6 Compute shader \u00b6","title":"Custom visuals: advanced"},{"location":"expert/custom3/#custom-visuals-advanced-level","text":"Note This page assumes the intermediate level guide to custom visuals has been followed.","title":"Custom visuals: advanced level"},{"location":"expert/custom3/#visual-hierarchy","text":"","title":"Visual hierarchy"},{"location":"expert/custom3/#pre-baking","text":"","title":"Pre-baking"},{"location":"expert/custom3/#infinite-rescaling","text":"","title":"Infinite rescaling"},{"location":"expert/custom3/#compute-shader","text":"","title":"Compute shader"},{"location":"expert/vklite/","text":"vklite: Vulkan for mere mortals \u00b6 Vulkan is an extremely powerful but highly complex low-level graphics API. It gives a very high level of control on the GPU, which is crucial when developing demanding 3D video games or making game engines. Scientific visualization has less stringent requirements and it can still benefit from a small, restricted subset of Vulkan. vklite is an attempt to provide a relatively easy, but much less powerful API on top of Vulkan. It has been primarily developed for scientific visualization needs, but it could used for other types of interactive graphics (animations, demos, simple video games) for which working directly on top of the Vulkan API would be overkill. This page provides a brief documentation of the vklite API. Familiarity with GPUs and graphics APIs like OpenGL, or more modern ones like Vulkan, Metal, DirectX 12, WebGPU is not strictly required but somewhat helpful. Note Visky currently uses Vulkan almost entirely via the vklite interface. This interface provides abstractions such as memory buffers, graphics pipelines, shaders, textures, resource bindings and so on, which are relatively similar to those in other low-level graphics APIs. Therefore, it might be feasible to make Visky with these other APIs in the future. In particular, leveraging emerging technologies such as WebGPU and WebAssembly would be an interesting future direction to make Visky work in the browser Canvas \u00b6 Overview of the graphics pipeline \u00b6 Vertex shader \u00b6 Fragment shader \u00b6 Other shaders \u00b6 Vertex layout \u00b6 Buffer \u00b6 Resource layout \u00b6 Texture \u00b6 Uniform buffer \u00b6 Compute pipeline \u00b6 Command buffer \u00b6 Command queue \u00b6 Viewport \u00b6 Indirect rendering \u00b6 Event loop \u00b6 Hardware capabilities and limits \u00b6 The VkyGpu structure contains a few fields with native Vulkan structures defining GPU capabilities and limits. Common minimal values \u00b6 We give here a few minimal values that we can reasonably expect on almost all devices (according to this Vulkan database ): Texture dimension Maximum allowed texture size (in any axis) 1D 16384 2D 16384 3D 2048","title":"vklite: Vulkan for Humans"},{"location":"expert/vklite/#vklite-vulkan-for-mere-mortals","text":"Vulkan is an extremely powerful but highly complex low-level graphics API. It gives a very high level of control on the GPU, which is crucial when developing demanding 3D video games or making game engines. Scientific visualization has less stringent requirements and it can still benefit from a small, restricted subset of Vulkan. vklite is an attempt to provide a relatively easy, but much less powerful API on top of Vulkan. It has been primarily developed for scientific visualization needs, but it could used for other types of interactive graphics (animations, demos, simple video games) for which working directly on top of the Vulkan API would be overkill. This page provides a brief documentation of the vklite API. Familiarity with GPUs and graphics APIs like OpenGL, or more modern ones like Vulkan, Metal, DirectX 12, WebGPU is not strictly required but somewhat helpful. Note Visky currently uses Vulkan almost entirely via the vklite interface. This interface provides abstractions such as memory buffers, graphics pipelines, shaders, textures, resource bindings and so on, which are relatively similar to those in other low-level graphics APIs. Therefore, it might be feasible to make Visky with these other APIs in the future. In particular, leveraging emerging technologies such as WebGPU and WebAssembly would be an interesting future direction to make Visky work in the browser","title":"vklite: Vulkan for mere mortals"},{"location":"expert/vklite/#canvas","text":"","title":"Canvas"},{"location":"expert/vklite/#overview-of-the-graphics-pipeline","text":"","title":"Overview of the graphics pipeline"},{"location":"expert/vklite/#vertex-shader","text":"","title":"Vertex shader"},{"location":"expert/vklite/#fragment-shader","text":"","title":"Fragment shader"},{"location":"expert/vklite/#other-shaders","text":"","title":"Other shaders"},{"location":"expert/vklite/#vertex-layout","text":"","title":"Vertex layout"},{"location":"expert/vklite/#buffer","text":"","title":"Buffer"},{"location":"expert/vklite/#resource-layout","text":"","title":"Resource layout"},{"location":"expert/vklite/#texture","text":"","title":"Texture"},{"location":"expert/vklite/#uniform-buffer","text":"","title":"Uniform buffer"},{"location":"expert/vklite/#compute-pipeline","text":"","title":"Compute pipeline"},{"location":"expert/vklite/#command-buffer","text":"","title":"Command buffer"},{"location":"expert/vklite/#command-queue","text":"","title":"Command queue"},{"location":"expert/vklite/#viewport","text":"","title":"Viewport"},{"location":"expert/vklite/#indirect-rendering","text":"","title":"Indirect rendering"},{"location":"expert/vklite/#event-loop","text":"","title":"Event loop"},{"location":"expert/vklite/#hardware-capabilities-and-limits","text":"The VkyGpu structure contains a few fields with native Vulkan structures defining GPU capabilities and limits.","title":"Hardware capabilities and limits"},{"location":"expert/vklite/#common-minimal-values","text":"We give here a few minimal values that we can reasonably expect on almost all devices (according to this Vulkan database ): Texture dimension Maximum allowed texture size (in any axis) 1D 16384 2D 16384 3D 2048","title":"Common minimal values"},{"location":"quickstart/","text":"Quick start \u00b6 This quick start guide will introduce Visky and will bring you through the installation of the library and your first basic plots (scatter plots, lines, images...). What is Visky? \u00b6 Code example \u00b6 Features \u00b6 Screenshots \u00b6 Short history \u00b6 Related projects \u00b6 Backlog \u00b6 The following features may be nice to have in the long-term, although some of them would require significant work: More types of 2D axes: log, polar, earth projection... Multithreading (for example, using a background thread to transfer data to the GPU or for callback functions)","title":"Introduction"},{"location":"quickstart/#quick-start","text":"This quick start guide will introduce Visky and will bring you through the installation of the library and your first basic plots (scatter plots, lines, images...).","title":"Quick start"},{"location":"quickstart/#what-is-visky","text":"","title":"What is Visky?"},{"location":"quickstart/#code-example","text":"","title":"Code example"},{"location":"quickstart/#features","text":"","title":"Features"},{"location":"quickstart/#screenshots","text":"","title":"Screenshots"},{"location":"quickstart/#short-history","text":"","title":"Short history"},{"location":"quickstart/#related-projects","text":"","title":"Related projects"},{"location":"quickstart/#backlog","text":"The following features may be nice to have in the long-term, although some of them would require significant work: More types of 2D axes: log, polar, earth projection... Multithreading (for example, using a background thread to transfer data to the GPU or for callback functions)","title":"Backlog"},{"location":"quickstart/basic/","text":"Basic interface \u00b6 Coming soon!","title":"Basic interface"},{"location":"quickstart/basic/#basic-interface","text":"Coming soon!","title":"Basic interface"},{"location":"quickstart/hello/","text":"Hello triangle \u00b6 This example shows you how to quickly make a window with a triangle. #include <visky/visky.h> // An array with 3 vectors. vec3 positions [] = { { -1 , -1 , 0 }, { + 1 , -1 , 0 }, { 0 , + 1 , 0 }}; // An array with 3 colors: red, gree, blue, a full opacity. VkyColor colors [] = { {{ 255 , 0 , 0 }, 255 }, {{ 0 , 255 , 0 }, 255 }, {{ 0 , 0 , 255 }, 255 }}; // This function automatically creates a canvas and shows a mesh visual // with 3 vertices, that is, a triangle. vky_basic_mesh ( 3 , positions , colors ); // Run the example, start the event loop until the window is closed or // the Escape key is pressed. vky_basic_run (); This example is pretty self-explanatory. The vky_basic_mesh() function automatically sets up an arcball controller: you can rotate the triangle with the mouse in 3D. The Basic API shown here ( vky_basic_*() functions) provides a quick way to make the most simplest plots possible. Read the User manual to learn more about the full API provided by Visky. Warning The Basic API only serves learning, teaching, and demonstration purposes. It should not be used in production.","title":"Hello triangle"},{"location":"quickstart/hello/#hello-triangle","text":"This example shows you how to quickly make a window with a triangle. #include <visky/visky.h> // An array with 3 vectors. vec3 positions [] = { { -1 , -1 , 0 }, { + 1 , -1 , 0 }, { 0 , + 1 , 0 }}; // An array with 3 colors: red, gree, blue, a full opacity. VkyColor colors [] = { {{ 255 , 0 , 0 }, 255 }, {{ 0 , 255 , 0 }, 255 }, {{ 0 , 0 , 255 }, 255 }}; // This function automatically creates a canvas and shows a mesh visual // with 3 vertices, that is, a triangle. vky_basic_mesh ( 3 , positions , colors ); // Run the example, start the event loop until the window is closed or // the Escape key is pressed. vky_basic_run (); This example is pretty self-explanatory. The vky_basic_mesh() function automatically sets up an arcball controller: you can rotate the triangle with the mouse in 3D. The Basic API shown here ( vky_basic_*() functions) provides a quick way to make the most simplest plots possible. Read the User manual to learn more about the full API provided by Visky. Warning The Basic API only serves learning, teaching, and demonstration purposes. It should not be used in production.","title":"Hello triangle"},{"location":"quickstart/install/","text":"Install instructions \u00b6 Coming soon! Dependencies \u00b6 Ubuntu \u00b6 macOS \u00b6 Windows \u00b6 Bindings \u00b6","title":"Install instructions"},{"location":"quickstart/install/#install-instructions","text":"Coming soon!","title":"Install instructions"},{"location":"quickstart/install/#dependencies","text":"","title":"Dependencies"},{"location":"quickstart/install/#ubuntu","text":"","title":"Ubuntu"},{"location":"quickstart/install/#macos","text":"","title":"macOS"},{"location":"quickstart/install/#windows","text":"","title":"Windows"},{"location":"quickstart/install/#bindings","text":"","title":"Bindings"},{"location":"user/","text":"User manual \u00b6 This user manual targets regular users who want to make scientific plots with Visky.","title":"Introduction"},{"location":"user/#user-manual","text":"This user manual targets regular users who want to make scientific plots with Visky.","title":"User manual"},{"location":"user/backends/","text":"Backends \u00b6 glfw \u00b6 Qt \u00b6 Video backend \u00b6 PNG backend \u00b6 Offscreen rendering \u00b6 VNC example \u00b6","title":"Backends"},{"location":"user/backends/#backends","text":"","title":"Backends"},{"location":"user/backends/#glfw","text":"","title":"glfw"},{"location":"user/backends/#qt","text":"","title":"Qt"},{"location":"user/backends/#video-backend","text":"","title":"Video backend"},{"location":"user/backends/#png-backend","text":"","title":"PNG backend"},{"location":"user/backends/#offscreen-rendering","text":"","title":"Offscreen rendering"},{"location":"user/backends/#vnc-example","text":"","title":"VNC example"},{"location":"user/canvas/","text":"The canvas \u00b6 Structure hierarchy \u00b6 App Window Canvas Scene Panel Other objects: Gui Application and backend \u00b6 Creating a canvas \u00b6 Background color Creating multiple canvases \u00b6 Making screenshots \u00b6","title":"The canvas"},{"location":"user/canvas/#the-canvas","text":"","title":"The canvas"},{"location":"user/canvas/#structure-hierarchy","text":"App Window Canvas Scene Panel Other objects: Gui","title":"Structure hierarchy"},{"location":"user/canvas/#application-and-backend","text":"","title":"Application and backend"},{"location":"user/canvas/#creating-a-canvas","text":"Background color","title":"Creating a canvas"},{"location":"user/canvas/#creating-multiple-canvases","text":"","title":"Creating multiple canvases"},{"location":"user/canvas/#making-screenshots","text":"","title":"Making screenshots"},{"location":"user/color/","text":"Colormaps \u00b6 Visky has built-in support for many continuous colormaps and discrete color palettes. It comes with most colormaps provided by the Python libraries matplotlib, bokeh, and colorcet. Note The colormaps are stored in a 256x256 24-bit texture. Each of the 256 rows of the texture contains one colormap or several color palettes. Significant empty space is reserved to future colormaps and custom, user-defined colormaps.","title":"Colormaps"},{"location":"user/color/#colormaps","text":"Visky has built-in support for many continuous colormaps and discrete color palettes. It comes with most colormaps provided by the Python libraries matplotlib, bokeh, and colorcet. Note The colormaps are stored in a 256x256 24-bit texture. Each of the 256 rows of the texture contains one colormap or several color palettes. Significant empty space is reserved to future colormaps and custom, user-defined colormaps.","title":"Colormaps"},{"location":"user/gui/","text":"Integrated GUI \u00b6 Visky integrates the Dear ImGUI C++ library developed by Omar Cornut. This library makes it possible to design basic to highly complex graphical user interfaces directly in Visky, without any other dependency such as Qt, wx, or similar. Dear ImGui supports a significant number of features and is improving at a rapid pace. Visky offers a light C wrapper on top of Dear ImGui for the most basic types of graphical interfaces. Using Dear ImGui directly is possible but requires to use C++. Basic graphical interfaces \u00b6 Using Dear ImGui in C++ \u00b6","title":"Integrated GUI"},{"location":"user/gui/#integrated-gui","text":"Visky integrates the Dear ImGUI C++ library developed by Omar Cornut. This library makes it possible to design basic to highly complex graphical user interfaces directly in Visky, without any other dependency such as Qt, wx, or similar. Dear ImGui supports a significant number of features and is improving at a rapid pace. Visky offers a light C wrapper on top of Dear ImGui for the most basic types of graphical interfaces. Using Dear ImGui directly is possible but requires to use C++.","title":"Integrated GUI"},{"location":"user/gui/#basic-graphical-interfaces","text":"","title":"Basic graphical interfaces"},{"location":"user/gui/#using-dear-imgui-in-c","text":"","title":"Using Dear ImGui in C++"},{"location":"user/interact/","text":"Interactivity \u00b6 The frame callback \u00b6 Getting the local time \u00b6 Getting mouse activity \u00b6 Getting keyboard activity \u00b6 Picking \u00b6","title":"Interactivity"},{"location":"user/interact/#interactivity","text":"","title":"Interactivity"},{"location":"user/interact/#the-frame-callback","text":"","title":"The frame callback"},{"location":"user/interact/#getting-the-local-time","text":"","title":"Getting the local time"},{"location":"user/interact/#getting-mouse-activity","text":"","title":"Getting mouse activity"},{"location":"user/interact/#getting-keyboard-activity","text":"","title":"Getting keyboard activity"},{"location":"user/interact/#picking","text":"","title":"Picking"},{"location":"user/mesh/","text":"Meshes and triangulations \u00b6 Visky can display meshes, polygons, triangulations, and planar straight-line graphs (PSLG). It integrates natively: the triangle C library , developed by Jonathan Richard Shewchuk, used to compute Delaunay triangulations; the earcut C++ library , developed by Mapbox, used to compute triangulations of polygons. Visky also provides a few simple mesh generation functions for basic shapes (spheres, cuboids, cylinders, and so on) and regular 2D surfaces. Mesh generation \u00b6 Polygons \u00b6 PSLG \u00b6 Triangulations \u00b6","title":"Meshes and triangulations"},{"location":"user/mesh/#meshes-and-triangulations","text":"Visky can display meshes, polygons, triangulations, and planar straight-line graphs (PSLG). It integrates natively: the triangle C library , developed by Jonathan Richard Shewchuk, used to compute Delaunay triangulations; the earcut C++ library , developed by Mapbox, used to compute triangulations of polygons. Visky also provides a few simple mesh generation functions for basic shapes (spheres, cuboids, cylinders, and so on) and regular 2D surfaces.","title":"Meshes and triangulations"},{"location":"user/mesh/#mesh-generation","text":"","title":"Mesh generation"},{"location":"user/mesh/#polygons","text":"","title":"Polygons"},{"location":"user/mesh/#pslg","text":"","title":"PSLG"},{"location":"user/mesh/#triangulations","text":"","title":"Triangulations"},{"location":"user/scene/","text":"The plot layout \u00b6 The grid \u00b6 Changing column widths and row heights \u00b6 Horizontal and vertical spanning \u00b6 Controllers \u00b6 Panzoom \u00b6 Axes 2D \u00b6 Axes 3D \u00b6 Arcball \u00b6 Camera \u00b6 Others \u00b6 Panel linking \u00b6","title":"The plot layout"},{"location":"user/scene/#the-plot-layout","text":"","title":"The plot layout"},{"location":"user/scene/#the-grid","text":"","title":"The grid"},{"location":"user/scene/#changing-column-widths-and-row-heights","text":"","title":"Changing column widths and row heights"},{"location":"user/scene/#horizontal-and-vertical-spanning","text":"","title":"Horizontal and vertical spanning"},{"location":"user/scene/#controllers","text":"","title":"Controllers"},{"location":"user/scene/#panzoom","text":"","title":"Panzoom"},{"location":"user/scene/#axes-2d","text":"","title":"Axes 2D"},{"location":"user/scene/#axes-3d","text":"","title":"Axes 3D"},{"location":"user/scene/#arcball","text":"","title":"Arcball"},{"location":"user/scene/#camera","text":"","title":"Camera"},{"location":"user/scene/#others","text":"","title":"Others"},{"location":"user/scene/#panel-linking","text":"","title":"Panel linking"},{"location":"user/transform/","text":"Coordinate systems and transformations \u00b6 A complex 2D plot may define many different coordinate systems. Visky provides a few functions that help you transform points from one coordinate system to the other. Axes 2D coordinate system definitions \u00b6 Transformations between coordinate systems \u00b6 There are two different ways of considering a given transformation: A mapping of a geometric point P to another point Q in a given reference space. A mapping of a triplet of coordinates representing a point P in a coordinate system A to another triplet of coordinates representing the same geometric point in a different coordinate system B. When dealing with 2D coordinate systems in the context of scientific plotting, we find it easier to think in terms of transformations of fixed points between different coordinate systems.","title":"Coordinate systems and transformations"},{"location":"user/transform/#coordinate-systems-and-transformations","text":"A complex 2D plot may define many different coordinate systems. Visky provides a few functions that help you transform points from one coordinate system to the other.","title":"Coordinate systems and transformations"},{"location":"user/transform/#axes-2d-coordinate-system-definitions","text":"","title":"Axes 2D coordinate system definitions"},{"location":"user/transform/#transformations-between-coordinate-systems","text":"There are two different ways of considering a given transformation: A mapping of a geometric point P to another point Q in a given reference space. A mapping of a triplet of coordinates representing a point P in a coordinate system A to another triplet of coordinates representing the same geometric point in a different coordinate system B. When dealing with 2D coordinate systems in the context of scientific plotting, we find it easier to think in terms of transformations of fixed points between different coordinate systems.","title":"Transformations between coordinate systems"},{"location":"user/visuals/","text":"Visuals \u00b6 Examples \u00b6 Visual props \u00b6 Visual data \u00b6 Visual groups \u00b6 Visual hierarchy \u00b6","title":"Visuals"},{"location":"user/visuals/#visuals","text":"","title":"Visuals"},{"location":"user/visuals/#examples","text":"","title":"Examples"},{"location":"user/visuals/#visual-props","text":"","title":"Visual props"},{"location":"user/visuals/#visual-data","text":"","title":"Visual data"},{"location":"user/visuals/#visual-groups","text":"","title":"Visual groups"},{"location":"user/visuals/#visual-hierarchy","text":"","title":"Visual hierarchy"},{"location":"user/visuals2D/","text":"2D plotting \u00b6 This page provides a list of all 2D visuals in Visky.","title":"2D plotting"},{"location":"user/visuals2D/#2d-plotting","text":"This page provides a list of all 2D visuals in Visky.","title":"2D plotting"},{"location":"user/visuals3D/","text":"3D plotting \u00b6 This page provides a list of all 3D visuals in Visky.","title":"3D plotting"},{"location":"user/visuals3D/#3d-plotting","text":"This page provides a list of all 3D visuals in Visky.","title":"3D plotting"}]}